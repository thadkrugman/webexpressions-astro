---
import Container from '@/components/shared/Container.astro';

const stats = [
  {
    label: 'Perfect Google Rating',
    value: '5.0',
    numericValue: 5.0,
    suffix: '',
    decimals: 1,
  },
  {
    label: 'Client Satisfaction Rate',
    value: '100%',
    numericValue: 100,
    suffix: '%',
    decimals: 0,
  },
  {
    label: 'Years of Modern Expertise',
    value: '4+',
    numericValue: 4,
    suffix: '+',
    decimals: 0,
  },
];
---

<Container as='section'>
  <dl
    class='grid grid-cols-1 gap-4 lg:grid-cols-3 lg:gap-8 animate-fade-in-up scroll-trigger'
    id='stats-container'
  >
    {
      stats.map((stat, index) => (
        <div
          class={`relative w-full rounded-lg bg-gray-50 p-6 lg:p-8 lg:px-4 animate-fade-in-up lg:animate-delay-${(index + 2) * 100} scroll-trigger`}
        >
          <div class='flex flex-col items-center text-center gap-y-3'>
            <dd class='text-3xl font-extrabold tracking-tight text-foreground sm:text-4xl lg:text-5xl'>
              <span
                class='stat-number'
                data-target={stat.numericValue}
                data-suffix={stat.suffix}
                data-decimals={stat.decimals}
              >
                0{stat.suffix}
              </span>
            </dd>
            <dt class='text-sm font-semibold uppercase tracking-wide'>
              {stat.label}
            </dt>
          </div>
          {/* Animated brand accent dot */}
          <div
            class='absolute top-3 right-3 w-2 h-2 bg-lime-400 rounded-full animate-pulse'
            aria-hidden='true'
          >
            <div
              class='absolute inset-0 bg-lime-400 rounded-full animate-ping opacity-75'
              aria-hidden='true'
            />
          </div>
        </div>
      ))
    }
  </dl>
</Container>

<script>
  function animateValue(
    element: HTMLElement,
    start: number,
    end: number,
    duration: number,
    decimals: number = 0,
    suffix: string = '',
  ) {
    const startTimestamp = performance.now();

    const step = (timestamp: number) => {
      const elapsed = timestamp - startTimestamp;
      const progress = Math.min(elapsed / duration, 1);

      const current = start + (end - start) * progress;

      if (decimals > 0) {
        element.textContent = current.toFixed(decimals) + suffix;
      } else {
        element.textContent = Math.floor(current) + suffix;
      }

      if (progress < 1) {
        requestAnimationFrame(step);
      }
    };

    requestAnimationFrame(step);
  }

  function initStatsAnimation() {
    const statsContainer = document.getElementById('stats-container');
    const statNumbers = document.querySelectorAll('.stat-number');

    if (!statsContainer || statNumbers.length === 0) return;

    let hasAnimated = false;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && !hasAnimated) {
            hasAnimated = true;

            statNumbers.forEach((stat, index) => {
              const element = stat as HTMLElement;
              const target = parseFloat(element.dataset.target || '0');
              const suffix = element.dataset.suffix || '';
              const decimals = parseInt(element.dataset.decimals || '0');

              // Stagger the animations
              setTimeout(() => {
                animateValue(element, 0, target, 2000, decimals, suffix);
              }, index * 200);
            });
          }
        });
      },
      {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px',
      },
    );

    observer.observe(statsContainer);
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initStatsAnimation);
  } else {
    initStatsAnimation();
  }

  // Also initialize on navigation (for SPAs)
  document.addEventListener('astro:page-load', initStatsAnimation);
</script>
